package com.docspot.eval;

public class Parser {
	private int pos = -1, ch;

	private void nextChar(String str) {
		ch = (++pos < str.length()) ? str.charAt(pos) : -1;
	}

	private boolean eat(int charToEat, String str) {
		while (ch == ' ')
			nextChar(str);
		if (ch == charToEat) {
			nextChar(str);
			return true;
		}
		return false;
	}

	public double parse(String str) {
		nextChar(str);
		double x = parseExpression(str);
		if (pos < str.length())
			throw new RuntimeException("Unexpected: " + (char) ch);
		return x;
	}

	/*
	 * Grammar: expression = term | expression `+` term | expression `-` term
	 * term = factor | term `*` factor | term `/` factor factor = `+` factor |
	 * `-` factor | `(` expression `)` | number
	 */

	private double parseExpression(String str) {
		double x = parseTerm(str);
		for (;;) {
			if (eat('+', str))
				x += parseTerm(str); // addition
			else if (eat('-', str))
				x -= parseTerm(str); // subtraction
			else
				return x;
		}
	}

	private double parseTerm(String str) {
		double x = parseFactor(str);
		for (;;) {
			if (eat('*', str))
				x *= parseFactor(str); // multiplication
			else if (eat('/', str))
				x /= parseFactor(str); // division
			else
				return x;
		}
	}

	private double parseFactor(String str) {
		if (eat('+', str))
			return parseFactor(str); // unary plus
		if (eat('-', str))
			return -parseFactor(str); // unary minus

		double x;
		boolean b;
		int startPos = this.pos;
		if (eat('(', str)) { // parentheses
			x = parseExpression(str);
			eat(')', str);
		} else if (b = (ch >= '0' && ch <= '9') || ch == '.') { // numbers
			while (b)
				nextChar(str);
			x = Double.parseDouble(str.substring(startPos, this.pos));
		}

		else {
			throw new RuntimeException("Unexpected: " + (char) ch);
		}

		return x;
	}

}
